; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉shadow.user꞉> 
; Creating cljs repl session...
; Connecting cljs repl: shadow-cljs...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs, repl: :app
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
cljs꞉components.rules.core꞉> 
#odoyle.rules.Session{:alpha-node #odoyle.rules.AlphaNode{:path nil, :test-field nil, :test-value nil, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 0], :test-field :attr, :test-value :todo/content, :children [], :successors (0 18), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 1], :test-field :attr, :test-value :todo/checked?, :children [], :successors (24 2 26), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 2], :test-field :attr, :test-value :todo/editing?, :children [], :successors (4), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 3], :test-field :attr, :test-value :todo/buttons, :children [], :successors (6 20), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 4], :test-field :id, :test-value :components.rules.events/todo, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 4 :children 0], :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors (8), :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 5], :test-field :id, :test-value :components.rules.events/global, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 5 :children 0], :test-field :attr, :test-value :components.rules.events/next-id, :children [], :successors (10), :facts {:components.rules.events/global {:components.rules.events/next-id #odoyle.rules.Fact{:id :components.rules.events/global, :attr :components.rules.events/next-id, :value 1}}}}], :successors [], :facts {:components.rules.events/global {:components.rules.events/next-id #odoyle.rules.Fact{:id :components.rules.events/global, :attr :components.rules.events/next-id, :value 1}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 6], :test-field :id, :test-value :components.rules.events/passcode, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 6 :children 0], :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors (12), :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 7], :test-field :id, :test-value :components.rules.closet/global, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 7 :children 0], :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors (36 14 42), :facts {:components.rules.closet/global {:components.rules.closet/inserted-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/inserted-passcode, :value []}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 7 :children 1], :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors (30 28 38), :facts {:components.rules.closet/global {:components.rules.closet/valid-passcode? #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/valid-passcode?, :value false}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 7 :children 2], :test-field :attr, :test-value :components.rules.closet/correct-passcode, :children [], :successors (40), :facts {:components.rules.closet/global {:components.rules.closet/correct-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/correct-passcode, :value "PRIDE"}}}}], :successors [], :facts {:components.rules.closet/global {:components.rules.closet/inserted-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/inserted-passcode, :value []}, :components.rules.closet/correct-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/correct-passcode, :value "PRIDE"}, :components.rules.closet/valid-passcode? #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/valid-passcode?, :value false}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 8], :test-field :id, :test-value :components.rules.events/closet, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 8 :children 0], :test-field :attr, :test-value :components.rules.events/close, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 8 :children 0 :children 0], :test-field :value, :test-value true, :children [], :successors (16), :facts {}}], :successors [], :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 9], :test-field :id, :test-value :components.rules.events/checkbox, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 9 :children 0], :test-field :attr, :test-value :components.rules.events/toggle, :children [], :successors (22), :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 10], :test-field :id, :test-value :components.rules.todos/derived, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 10 :children 0], :test-field :attr, :test-value :components.rules.todos/todos, :children [], :successors (32), :facts {:components.rules.todos/derived {:components.rules.todos/todos #odoyle.rules.Fact{:id :components.rules.todos/derived, :attr :components.rules.todos/todos, :value []}}}}], :successors [], :facts {:components.rules.todos/derived {:components.rules.todos/todos #odoyle.rules.Fact{:id :components.rules.todos/derived, :attr :components.rules.todos/todos, :value []}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 11], :test-field :id, :test-value :components.rules.todos/global, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 11 :children 0], :test-field :attr, :test-value :components.rules.todos/new-todo, :children [], :successors (34), :facts {:components.rules.todos/global {:components.rules.todos/new-todo #odoyle.rules.Fact{:id :components.rules.todos/global, :attr :components.rules.todos/new-todo, :value ""}}}}], :successors [], :facts {:components.rules.todos/global {:components.rules.todos/new-todo #odoyle.rules.Fact{:id :components.rules.todos/global, :attr :components.rules.todos/new-todo, :value ""}, :components.rules.todos/active-id #odoyle.rules.Fact{:id :components.rules.todos/global, :attr :components.rules.todos/active-id, :value nil}}}}], :successors [], :facts {}}, :beta-nodes {nil {:when-fn nil, :then-fn #object[Function], :then-finally-fn nil}, 0 #odoyle.rules.JoinNode{:id 0, :parent-id nil, :child-id 1, :alpha-node-path [:alpha-node :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote content), :key :content}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 32 #odoyle.rules.JoinNode{:id 32, :parent-id nil, :child-id 33, :alpha-node-path [:alpha-node :children 10 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/derived, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/todos, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todos), :key :todos}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.todos/derived :components.rules.todos/todos]}, :disable-fast-updates false}, 1 #odoyle.rules.MemoryNode{:id 1, :parent-id 0, :child-id 2, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote content), :key :content}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 33 #odoyle.rules.MemoryNode{:id 33, :parent-id 32, :child-id nil, :leaf-node-id 33, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/derived, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/todos, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todos), :key :todos}], :opts nil}, :matches {[[:components.rules.todos/derived :components.rules.todos/todos]] #odoyle.rules.Match{:vars {:todos []}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 2 #odoyle.rules.JoinNode{:id 2, :parent-id 1, :child-id 3, :alpha-node-path [:alpha-node :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked?), :key :checked?}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 34 #odoyle.rules.JoinNode{:id 34, :parent-id nil, :child-id 35, :alpha-node-path [:alpha-node :children 11 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/new-todo, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.todos/global :components.rules.todos/new-todo]}, :disable-fast-updates false}, 3 #odoyle.rules.MemoryNode{:id 3, :parent-id 2, :child-id 4, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked?), :key :checked?}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 35 #odoyle.rules.MemoryNode{:id 35, :parent-id 34, :child-id nil, :leaf-node-id 35, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/new-todo, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :matches {[[:components.rules.todos/global :components.rules.todos/new-todo]] #odoyle.rules.Match{:vars {:todo ""}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 4 #odoyle.rules.JoinNode{:id 4, :parent-id 3, :child-id 5, :alpha-node-path [:alpha-node :children 2], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/editing?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote editing?), :key :editing?}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 36 #odoyle.rules.JoinNode{:id 36, :parent-id nil, :child-id 37, :alpha-node-path [:alpha-node :children 7 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/inserted-passcode]}, :disable-fast-updates false}, 5 #odoyle.rules.MemoryNode{:id 5, :parent-id 4, :child-id 6, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/editing?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote editing?), :key :editing?}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 37 #odoyle.rules.MemoryNode{:id 37, :parent-id 36, :child-id 38, :leaf-node-id 39, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/inserted-passcode]] #odoyle.rules.Match{:vars {:passcode []}, :enabled true}}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 6 #odoyle.rules.JoinNode{:id 6, :parent-id 5, :child-id 7, :alpha-node-path [:alpha-node :children 3], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 38 #odoyle.rules.JoinNode{:id 38, :parent-id 37, :child-id 39, :alpha-node-path [:alpha-node :children 7 :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isValid?), :key :isValid?}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/valid-passcode?]}, :disable-fast-updates false}, 7 #odoyle.rules.MemoryNode{:id 7, :parent-id 6, :child-id nil, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn #object[components$rules$todos$components_rules_todos_todos], :trigger false}, 39 #odoyle.rules.MemoryNode{:id 39, :parent-id 38, :child-id nil, :leaf-node-id 39, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isValid?), :key :isValid?}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/inserted-passcode] [:components.rules.closet/global :components.rules.closet/valid-passcode?]] #odoyle.rules.Match{:vars {:passcode [], :isValid? false}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 8 #odoyle.rules.JoinNode{:id 8, :parent-id nil, :child-id 9, :alpha-node-path [:alpha-node :children 4 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/todo, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 40 #odoyle.rules.JoinNode{:id 40, :parent-id nil, :child-id 41, :alpha-node-path [:alpha-node :children 7 :children 2], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/correct-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote correct), :key :correct}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/correct-passcode]}, :disable-fast-updates false}, 9 #odoyle.rules.MemoryNode{:id 9, :parent-id 8, :child-id 10, :leaf-node-id 11, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/todo, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 41 #odoyle.rules.MemoryNode{:id 41, :parent-id 40, :child-id 42, :leaf-node-id 43, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/correct-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote correct), :key :correct}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/correct-passcode]] #odoyle.rules.Match{:vars {:correct "PRIDE"}, :enabled true}}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 10 #odoyle.rules.JoinNode{:id 10, :parent-id 9, :child-id 11, :alpha-node-path [:alpha-node :children 5 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/next-id, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote next-id), :key :next-id}], :opts {:then [:bool false]}}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 42 #odoyle.rules.JoinNode{:id 42, :parent-id 41, :child-id 43, :alpha-node-path [:alpha-node :children 7 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote inserted), :key :inserted}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/inserted-passcode]}, :disable-fast-updates false}, 11 #odoyle.rules.MemoryNode{:id 11, :parent-id 10, :child-id nil, :leaf-node-id 11, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/next-id, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote next-id), :key :next-id}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_new_todo], :then-finally-fn nil, :trigger false}, 43 #odoyle.rules.MemoryNode{:id 43, :parent-id 42, :child-id nil, :leaf-node-id 43, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote inserted), :key :inserted}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/correct-passcode] [:components.rules.closet/global :components.rules.closet/inserted-passcode]] #odoyle.rules.Match{:vars {:correct "PRIDE", :inserted []}, :enabled true}}, :when-fn nil, :then-fn #object[components$rules$closet$components_rules_closet_check_passcode], :then-finally-fn nil, :trigger false}, 12 #odoyle.rules.JoinNode{:id 12, :parent-id nil, :child-id 13, :alpha-node-path [:alpha-node :children 6 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/passcode, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote selection), :key :selection}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 13 #odoyle.rules.MemoryNode{:id 13, :parent-id 12, :child-id 14, :leaf-node-id 15, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/passcode, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote selection), :key :selection}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 14 #odoyle.rules.JoinNode{:id 14, :parent-id 13, :child-id 15, :alpha-node-path [:alpha-node :children 7 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts {:then [:bool false]}}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 15 #odoyle.rules.MemoryNode{:id 15, :parent-id 14, :child-id nil, :leaf-node-id 15, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_insert_passcode], :then-finally-fn nil, :trigger false}, 16 #odoyle.rules.JoinNode{:id 16, :parent-id nil, :child-id 17, :alpha-node-path [:alpha-node :children 8 :children 0 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/closet, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/close, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :value, :test-value true, :children [], :successors [], :facts {}}], :bindings [], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 17 #odoyle.rules.MemoryNode{:id 17, :parent-id 16, :child-id 18, :leaf-node-id 21, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/closet, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/close, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :value, :test-value true, :children [], :successors [], :facts {}}], :bindings [], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 18 #odoyle.rules.JoinNode{:id 18, :parent-id 17, :child-id 19, :alpha-node-path [:alpha-node :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts {:then [:bool false]}}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 19 #odoyle.rules.MemoryNode{:id 19, :parent-id 18, :child-id 20, :leaf-node-id 21, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 20 #odoyle.rules.JoinNode{:id 20, :parent-id 19, :child-id 21, :alpha-node-path [:alpha-node :children 3], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts {:then [:bool false]}}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 21 #odoyle.rules.MemoryNode{:id 21, :parent-id 20, :child-id nil, :leaf-node-id 21, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_close_closet], :then-finally-fn nil, :trigger false}, 22 #odoyle.rules.JoinNode{:id 22, :parent-id nil, :child-id 23, :alpha-node-path [:alpha-node :children 9 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/checkbox, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/toggle, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo-id), :key :todo-id}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates true}, 23 #odoyle.rules.MemoryNode{:id 23, :parent-id 22, :child-id 24, :leaf-node-id 25, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/checkbox, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/toggle, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo-id), :key :todo-id}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 24 #odoyle.rules.JoinNode{:id 24, :parent-id 23, :child-id 25, :alpha-node-path [:alpha-node :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote todo-id), :key :todo-id} #odoyle.rules.Binding{:field :value, :sym (quote isChecked?), :key :isChecked?}], :opts {:then [:bool false]}}, :id-key :todo-id, :old-id-attrs #{}, :disable-fast-updates false}, 25 #odoyle.rules.MemoryNode{:id 25, :parent-id 24, :child-id nil, :leaf-node-id 25, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote todo-id), :key :todo-id} #odoyle.rules.Binding{:field :value, :sym (quote isChecked?), :key :isChecked?}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_toggle_checkbox], :then-finally-fn nil, :trigger false}, 26 #odoyle.rules.JoinNode{:id 26, :parent-id nil, :child-id 27, :alpha-node-path [:alpha-node :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked), :key :checked}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 27 #odoyle.rules.MemoryNode{:id 27, :parent-id 26, :child-id nil, :leaf-node-id 27, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked), :key :checked}], :opts nil}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_save_to_localstorage], :then-finally-fn nil, :trigger false}, 28 #odoyle.rules.JoinNode{:id 28, :parent-id nil, :child-id 29, :alpha-node-path [:alpha-node :children 7 :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/valid-passcode?]}, :disable-fast-updates false}, 29 #odoyle.rules.MemoryNode{:id 29, :parent-id 28, :child-id nil, :leaf-node-id 29, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/valid-passcode?]] #odoyle.rules.Match{:vars {:isOpen? false}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 30 #odoyle.rules.JoinNode{:id 30, :parent-id nil, :child-id 31, :alpha-node-path [:alpha-node :children 7 :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/valid-passcode?]}, :disable-fast-updates false}, 31 #odoyle.rules.MemoryNode{:id 31, :parent-id 30, :child-id nil, :leaf-node-id 31, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/valid-passcode?]] #odoyle.rules.Match{:vars {:isOpen? false}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}}, :last-id 43, :rule-name->node-id {:components.rules.renders/todo-form 35, :components.rules.events/new-todo 11, :components.rules.events/insert-passcode 15, :components.rules.renders/passcode-display 39, :components.rules.events/toggle-checkbox 25, :components.rules.events/save-to-localstorage 27, :components.rules.events/close-closet 21, :components.rules.closet/check-passcode 43, :components.rules.renders/closet 31, :components.rules.renders/app-root nil, :components.rules.renders/closet-door 29, :components.rules.renders/active-todos 33, :components.rules.todos/todos 7}, :node-id->rule-name {nil :components.rules.renders/app-root, 33 :components.rules.renders/active-todos, 35 :components.rules.renders/todo-form, 7 :components.rules.todos/todos, 39 :components.rules.renders/passcode-display, 11 :components.rules.events/new-todo, 43 :components.rules.closet/check-passcode, 15 :components.rules.events/insert-passcode, 21 :components.rules.events/close-closet, 25 :components.rules.events/toggle-checkbox, 27 :components.rules.events/save-to-localstorage, 29 :components.rules.renders/closet-door, 31 :components.rules.renders/closet}, :id-attr-nodes {[:components.rules.todos/global :components.rules.todos/new-todo] #{[:alpha-node :children 11] [:alpha-node :children 11 :children 0]}, [:components.rules.todos/global :components.rules.todos/active-id] #{[:alpha-node :children 11]}, [:components.rules.todos/derived :components.rules.todos/todos] #{[:alpha-node :children 10] [:alpha-node :children 10 :children 0]}, [:components.rules.events/global :components.rules.events/next-id] #{[:alpha-node :children 5] [:alpha-node :children 5 :children 0]}, [:components.rules.closet/global :components.rules.closet/inserted-passcode] #{[:alpha-node :children 7] [:alpha-node :children 7 :children 0]}, [:components.rules.closet/global :components.rules.closet/correct-passcode] #{[:alpha-node :children 7] [:alpha-node :children 7 :children 2]}, [:components.rules.closet/global :components.rules.closet/valid-passcode?] #{[:alpha-node :children 7] [:alpha-node :children 7 :children 1]}}, :then-queue #{}, :then-finally-queue #{}}
cljs꞉components.rules.core꞉> 
#odoyle.rules.Session{:alpha-node #odoyle.rules.AlphaNode{:path nil, :test-field nil, :test-value nil, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 0], :test-field :attr, :test-value :todo/content, :children [], :successors (0 18), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 1], :test-field :attr, :test-value :todo/checked?, :children [], :successors (24 2 26), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 2], :test-field :attr, :test-value :todo/editing?, :children [], :successors (4), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 3], :test-field :attr, :test-value :todo/buttons, :children [], :successors (6 20), :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 4], :test-field :id, :test-value :components.rules.events/todo, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 4 :children 0], :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors (8), :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 5], :test-field :id, :test-value :components.rules.events/global, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 5 :children 0], :test-field :attr, :test-value :components.rules.events/next-id, :children [], :successors (10), :facts {:components.rules.events/global {:components.rules.events/next-id #odoyle.rules.Fact{:id :components.rules.events/global, :attr :components.rules.events/next-id, :value 1}}}}], :successors [], :facts {:components.rules.events/global {:components.rules.events/next-id #odoyle.rules.Fact{:id :components.rules.events/global, :attr :components.rules.events/next-id, :value 1}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 6], :test-field :id, :test-value :components.rules.events/passcode, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 6 :children 0], :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors (12), :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 7], :test-field :id, :test-value :components.rules.closet/global, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 7 :children 0], :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors (36 14 42), :facts {:components.rules.closet/global {:components.rules.closet/inserted-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/inserted-passcode, :value []}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 7 :children 1], :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors (30 28 38), :facts {:components.rules.closet/global {:components.rules.closet/valid-passcode? #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/valid-passcode?, :value false}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 7 :children 2], :test-field :attr, :test-value :components.rules.closet/correct-passcode, :children [], :successors (40), :facts {:components.rules.closet/global {:components.rules.closet/correct-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/correct-passcode, :value "PRIDE"}}}}], :successors [], :facts {:components.rules.closet/global {:components.rules.closet/inserted-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/inserted-passcode, :value []}, :components.rules.closet/correct-passcode #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/correct-passcode, :value "PRIDE"}, :components.rules.closet/valid-passcode? #odoyle.rules.Fact{:id :components.rules.closet/global, :attr :components.rules.closet/valid-passcode?, :value false}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 8], :test-field :id, :test-value :components.rules.events/closet, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 8 :children 0], :test-field :attr, :test-value :components.rules.events/close, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 8 :children 0 :children 0], :test-field :value, :test-value true, :children [], :successors (16), :facts {}}], :successors [], :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 9], :test-field :id, :test-value :components.rules.events/checkbox, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 9 :children 0], :test-field :attr, :test-value :components.rules.events/toggle, :children [], :successors (22), :facts {}}], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 10], :test-field :id, :test-value :components.rules.todos/derived, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 10 :children 0], :test-field :attr, :test-value :components.rules.todos/todos, :children [], :successors (32), :facts {:components.rules.todos/derived {:components.rules.todos/todos #odoyle.rules.Fact{:id :components.rules.todos/derived, :attr :components.rules.todos/todos, :value []}}}}], :successors [], :facts {:components.rules.todos/derived {:components.rules.todos/todos #odoyle.rules.Fact{:id :components.rules.todos/derived, :attr :components.rules.todos/todos, :value []}}}} #odoyle.rules.AlphaNode{:path [:alpha-node :children 11], :test-field :id, :test-value :components.rules.todos/global, :children [#odoyle.rules.AlphaNode{:path [:alpha-node :children 11 :children 0], :test-field :attr, :test-value :components.rules.todos/new-todo, :children [], :successors (34), :facts {:components.rules.todos/global {:components.rules.todos/new-todo #odoyle.rules.Fact{:id :components.rules.todos/global, :attr :components.rules.todos/new-todo, :value ""}}}}], :successors [], :facts {:components.rules.todos/global {:components.rules.todos/new-todo #odoyle.rules.Fact{:id :components.rules.todos/global, :attr :components.rules.todos/new-todo, :value ""}, :components.rules.todos/active-id #odoyle.rules.Fact{:id :components.rules.todos/global, :attr :components.rules.todos/active-id, :value nil}}}}], :successors [], :facts {}}, :beta-nodes {nil {:when-fn nil, :then-fn #object[Function], :then-finally-fn nil}, 0 #odoyle.rules.JoinNode{:id 0, :parent-id nil, :child-id 1, :alpha-node-path [:alpha-node :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote content), :key :content}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 32 #odoyle.rules.JoinNode{:id 32, :parent-id nil, :child-id 33, :alpha-node-path [:alpha-node :children 10 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/derived, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/todos, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todos), :key :todos}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.todos/derived :components.rules.todos/todos]}, :disable-fast-updates false}, 1 #odoyle.rules.MemoryNode{:id 1, :parent-id 0, :child-id 2, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote content), :key :content}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 33 #odoyle.rules.MemoryNode{:id 33, :parent-id 32, :child-id nil, :leaf-node-id 33, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/derived, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/todos, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todos), :key :todos}], :opts nil}, :matches {[[:components.rules.todos/derived :components.rules.todos/todos]] #odoyle.rules.Match{:vars {:todos []}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 2 #odoyle.rules.JoinNode{:id 2, :parent-id 1, :child-id 3, :alpha-node-path [:alpha-node :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked?), :key :checked?}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 34 #odoyle.rules.JoinNode{:id 34, :parent-id nil, :child-id 35, :alpha-node-path [:alpha-node :children 11 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/new-todo, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.todos/global :components.rules.todos/new-todo]}, :disable-fast-updates false}, 3 #odoyle.rules.MemoryNode{:id 3, :parent-id 2, :child-id 4, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked?), :key :checked?}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 35 #odoyle.rules.MemoryNode{:id 35, :parent-id 34, :child-id nil, :leaf-node-id 35, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.todos/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.todos/new-todo, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :matches {[[:components.rules.todos/global :components.rules.todos/new-todo]] #odoyle.rules.Match{:vars {:todo ""}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 4 #odoyle.rules.JoinNode{:id 4, :parent-id 3, :child-id 5, :alpha-node-path [:alpha-node :children 2], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/editing?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote editing?), :key :editing?}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 36 #odoyle.rules.JoinNode{:id 36, :parent-id nil, :child-id 37, :alpha-node-path [:alpha-node :children 7 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/inserted-passcode]}, :disable-fast-updates false}, 5 #odoyle.rules.MemoryNode{:id 5, :parent-id 4, :child-id 6, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/editing?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote editing?), :key :editing?}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 37 #odoyle.rules.MemoryNode{:id 37, :parent-id 36, :child-id 38, :leaf-node-id 39, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/inserted-passcode]] #odoyle.rules.Match{:vars {:passcode []}, :enabled true}}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 6 #odoyle.rules.JoinNode{:id 6, :parent-id 5, :child-id 7, :alpha-node-path [:alpha-node :children 3], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts nil}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 38 #odoyle.rules.JoinNode{:id 38, :parent-id 37, :child-id 39, :alpha-node-path [:alpha-node :children 7 :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isValid?), :key :isValid?}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/valid-passcode?]}, :disable-fast-updates false}, 7 #odoyle.rules.MemoryNode{:id 7, :parent-id 6, :child-id nil, :leaf-node-id 7, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn #object[components$rules$todos$components_rules_todos_todos], :trigger false}, 39 #odoyle.rules.MemoryNode{:id 39, :parent-id 38, :child-id nil, :leaf-node-id 39, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isValid?), :key :isValid?}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/inserted-passcode] [:components.rules.closet/global :components.rules.closet/valid-passcode?]] #odoyle.rules.Match{:vars {:passcode [], :isValid? false}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 8 #odoyle.rules.JoinNode{:id 8, :parent-id nil, :child-id 9, :alpha-node-path [:alpha-node :children 4 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/todo, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 40 #odoyle.rules.JoinNode{:id 40, :parent-id nil, :child-id 41, :alpha-node-path [:alpha-node :children 7 :children 2], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/correct-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote correct), :key :correct}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/correct-passcode]}, :disable-fast-updates false}, 9 #odoyle.rules.MemoryNode{:id 9, :parent-id 8, :child-id 10, :leaf-node-id 11, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/todo, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 41 #odoyle.rules.MemoryNode{:id 41, :parent-id 40, :child-id 42, :leaf-node-id 43, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/correct-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote correct), :key :correct}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/correct-passcode]] #odoyle.rules.Match{:vars {:correct "PRIDE"}, :enabled true}}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 10 #odoyle.rules.JoinNode{:id 10, :parent-id 9, :child-id 11, :alpha-node-path [:alpha-node :children 5 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/next-id, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote next-id), :key :next-id}], :opts {:then [:bool false]}}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 42 #odoyle.rules.JoinNode{:id 42, :parent-id 41, :child-id 43, :alpha-node-path [:alpha-node :children 7 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote inserted), :key :inserted}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/inserted-passcode]}, :disable-fast-updates false}, 11 #odoyle.rules.MemoryNode{:id 11, :parent-id 10, :child-id nil, :leaf-node-id 11, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/next-id, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote next-id), :key :next-id}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_new_todo], :then-finally-fn nil, :trigger false}, 43 #odoyle.rules.MemoryNode{:id 43, :parent-id 42, :child-id nil, :leaf-node-id 43, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote inserted), :key :inserted}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/correct-passcode] [:components.rules.closet/global :components.rules.closet/inserted-passcode]] #odoyle.rules.Match{:vars {:correct "PRIDE", :inserted []}, :enabled true}}, :when-fn nil, :then-fn #object[components$rules$closet$components_rules_closet_check_passcode], :then-finally-fn nil, :trigger false}, 12 #odoyle.rules.JoinNode{:id 12, :parent-id nil, :child-id 13, :alpha-node-path [:alpha-node :children 6 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/passcode, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote selection), :key :selection}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 13 #odoyle.rules.MemoryNode{:id 13, :parent-id 12, :child-id 14, :leaf-node-id 15, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/passcode, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/insertion, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote selection), :key :selection}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 14 #odoyle.rules.JoinNode{:id 14, :parent-id 13, :child-id 15, :alpha-node-path [:alpha-node :children 7 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts {:then [:bool false]}}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 15 #odoyle.rules.MemoryNode{:id 15, :parent-id 14, :child-id nil, :leaf-node-id 15, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/inserted-passcode, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote passcode), :key :passcode}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_insert_passcode], :then-finally-fn nil, :trigger false}, 16 #odoyle.rules.JoinNode{:id 16, :parent-id nil, :child-id 17, :alpha-node-path [:alpha-node :children 8 :children 0 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/closet, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/close, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :value, :test-value true, :children [], :successors [], :facts {}}], :bindings [], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 17 #odoyle.rules.MemoryNode{:id 17, :parent-id 16, :child-id 18, :leaf-node-id 21, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/closet, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/close, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :value, :test-value true, :children [], :successors [], :facts {}}], :bindings [], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 18 #odoyle.rules.JoinNode{:id 18, :parent-id 17, :child-id 19, :alpha-node-path [:alpha-node :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts {:then [:bool false]}}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 19 #odoyle.rules.MemoryNode{:id 19, :parent-id 18, :child-id 20, :leaf-node-id 21, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/content, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote todo), :key :todo}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 20 #odoyle.rules.JoinNode{:id 20, :parent-id 19, :child-id 21, :alpha-node-path [:alpha-node :children 3], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts {:then [:bool false]}}, :id-key :id, :old-id-attrs #{}, :disable-fast-updates false}, 21 #odoyle.rules.MemoryNode{:id 21, :parent-id 20, :child-id nil, :leaf-node-id 21, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/buttons, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote buttons), :key :buttons}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_close_closet], :then-finally-fn nil, :trigger false}, 22 #odoyle.rules.JoinNode{:id 22, :parent-id nil, :child-id 23, :alpha-node-path [:alpha-node :children 9 :children 0], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/checkbox, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/toggle, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo-id), :key :todo-id}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates true}, 23 #odoyle.rules.MemoryNode{:id 23, :parent-id 22, :child-id 24, :leaf-node-id 25, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.events/checkbox, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.events/toggle, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote todo-id), :key :todo-id}], :opts nil}, :matches {}, :when-fn nil, :then-fn nil, :then-finally-fn nil, :trigger false}, 24 #odoyle.rules.JoinNode{:id 24, :parent-id 23, :child-id 25, :alpha-node-path [:alpha-node :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote todo-id), :key :todo-id} #odoyle.rules.Binding{:field :value, :sym (quote isChecked?), :key :isChecked?}], :opts {:then [:bool false]}}, :id-key :todo-id, :old-id-attrs #{}, :disable-fast-updates false}, 25 #odoyle.rules.MemoryNode{:id 25, :parent-id 24, :child-id nil, :leaf-node-id 25, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote todo-id), :key :todo-id} #odoyle.rules.Binding{:field :value, :sym (quote isChecked?), :key :isChecked?}], :opts {:then [:bool false]}}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_toggle_checkbox], :then-finally-fn nil, :trigger false}, 26 #odoyle.rules.JoinNode{:id 26, :parent-id nil, :child-id 27, :alpha-node-path [:alpha-node :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked), :key :checked}], :opts nil}, :id-key nil, :old-id-attrs #{}, :disable-fast-updates false}, 27 #odoyle.rules.MemoryNode{:id 27, :parent-id 26, :child-id nil, :leaf-node-id 27, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :todo/checked?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :id, :sym (quote id), :key :id} #odoyle.rules.Binding{:field :value, :sym (quote checked), :key :checked}], :opts nil}, :matches {}, :when-fn nil, :then-fn #object[components$rules$events$components_rules_events_save_to_localstorage], :then-finally-fn nil, :trigger false}, 28 #odoyle.rules.JoinNode{:id 28, :parent-id nil, :child-id 29, :alpha-node-path [:alpha-node :children 7 :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/valid-passcode?]}, :disable-fast-updates false}, 29 #odoyle.rules.MemoryNode{:id 29, :parent-id 28, :child-id nil, :leaf-node-id 29, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/valid-passcode?]] #odoyle.rules.Match{:vars {:isOpen? false}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}, 30 #odoyle.rules.JoinNode{:id 30, :parent-id nil, :child-id 31, :alpha-node-path [:alpha-node :children 7 :children 1], :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :id-key nil, :old-id-attrs #{[:components.rules.closet/global :components.rules.closet/valid-passcode?]}, :disable-fast-updates false}, 31 #odoyle.rules.MemoryNode{:id 31, :parent-id 30, :child-id nil, :leaf-node-id 31, :condition #odoyle.rules.Condition{:nodes [#odoyle.rules.AlphaNode{:path nil, :test-field :id, :test-value :components.rules.closet/global, :children [], :successors [], :facts {}} #odoyle.rules.AlphaNode{:path nil, :test-field :attr, :test-value :components.rules.closet/valid-passcode?, :children [], :successors [], :facts {}}], :bindings [#odoyle.rules.Binding{:field :value, :sym (quote isOpen?), :key :isOpen?}], :opts nil}, :matches {[[:components.rules.closet/global :components.rules.closet/valid-passcode?]] #odoyle.rules.Match{:vars {:isOpen? false}, :enabled true}}, :when-fn nil, :then-fn #object[Function], :then-finally-fn nil, :trigger false}}, :last-id 43, :rule-name->node-id {:components.rules.renders/todo-form 35, :components.rules.events/new-todo 11, :components.rules.events/insert-passcode 15, :components.rules.renders/passcode-display 39, :components.rules.events/toggle-checkbox 25, :components.rules.events/save-to-localstorage 27, :components.rules.events/close-closet 21, :components.rules.closet/check-passcode 43, :components.rules.renders/closet 31, :components.rules.renders/app-root nil, :components.rules.renders/closet-door 29, :components.rules.renders/active-todos 33, :components.rules.todos/todos 7}, :node-id->rule-name {nil :components.rules.renders/app-root, 33 :components.rules.renders/active-todos, 35 :components.rules.renders/todo-form, 7 :components.rules.todos/todos, 39 :components.rules.renders/passcode-display, 11 :components.rules.events/new-todo, 43 :components.rules.closet/check-passcode, 15 :components.rules.events/insert-passcode, 21 :components.rules.events/close-closet, 25 :components.rules.events/toggle-checkbox, 27 :components.rules.events/save-to-localstorage, 29 :components.rules.renders/closet-door, 31 :components.rules.renders/closet}, :id-attr-nodes {[:components.rules.todos/global :components.rules.todos/new-todo] #{[:alpha-node :children 11] [:alpha-node :children 11 :children 0]}, [:components.rules.todos/global :components.rules.todos/active-id] #{[:alpha-node :children 11]}, [:components.rules.todos/derived :components.rules.todos/todos] #{[:alpha-node :children 10] [:alpha-node :children 10 :children 0]}, [:components.rules.events/global :components.rules.events/next-id] #{[:alpha-node :children 5] [:alpha-node :children 5 :children 0]}, [:components.rules.closet/global :components.rules.closet/inserted-passcode] #{[:alpha-node :children 7] [:alpha-node :children 7 :children 0]}, [:components.rules.closet/global :components.rules.closet/correct-passcode] #{[:alpha-node :children 7] [:alpha-node :children 7 :children 2]}, [:components.rules.closet/global :components.rules.closet/valid-passcode?] #{[:alpha-node :children 7] [:alpha-node :children 7 :children 1]}}, :then-queue #{}, :then-finally-queue #{}}
cljs꞉components.rules.core꞉> 
"([:components.rules.todos/global :components.rules.todos/active-id nil] [:components.rules.closet/global :components.rules.closet/valid-passcode? false] [:components.rules.closet/global :components.rules.closet/correct-passcode \"PRIDE\"] [:components.rules.events/closet :components.rules.events/close true] [1 :todo/buttons ({:button/content \"q\", :button/selected? false, :button/id 0} {:button/content \"u\", :button/selected? false, :button/id 1} {:button/content \"e\", :button/selected? false, :button/id 2} {:button/content \"s\", :button/selected? false, :button/id 3} {:button/content \"t\", :button/selected? false, :button/id 4} {:button/content \"i\", :button/selected? false, :button/id 5} {:button/content \"o\", :button/selected? false, :button/id 6} {:button/content \"n\", :button/selected? false, :button/id 7} {:button/content \"s\", :button/selected? false, :button/id 8})] [:components.rules.todos/global :components.rules.todos/new-todo \"\"] [1 :todo/content \"questions\"] [1 :todo/editing? false] [:components.rules.events/todo :components.rules.events/insertion \"questions\"] [:components.rules.events/global :components.rules.events/next-id 2] [:components.rules.events/checkbox :components.rules.events/toggle 1] [1 :todo/checked? false] [:components.rules.closet/global :components.rules.closet/inserted-passcode []])"
cljs꞉components.rules.core꞉> 
"([:components.rules.todos/global :components.rules.todos/active-id nil] [:components.rules.closet/global :components.rules.closet/valid-passcode? false] [:components.rules.closet/global :components.rules.closet/correct-passcode \"PRIDE\"] [:components.rules.events/closet :components.rules.events/close true] [1 :todo/buttons ({:button/content \"w\", :button/selected? false, :button/id 0} {:button/content \"o\", :button/selected? false, :button/id 1} {:button/content \"n\", :button/selected? false, :button/id 2} {:button/content \"d\", :button/selected? false, :button/id 3} {:button/content \"e\", :button/selected? false, :button/id 4} {:button/content \"r\", :button/selected? false, :button/id 5} {:button/content \"f\", :button/selected? false, :button/id 6} {:button/content \"u\", :button/selected? false, :button/id 7} {:button/content \"l\", :button/selected? false, :button/id 8})] [:components.rules.todos/global :components.rules.todos/new-todo \"\"] [1 :todo/content \"wonderful\"] [1 :todo/editing? false] [:components.rules.events/todo :components.rules.events/insertion \"wonderful\"] [:components.rules.events/global :components.rules.events/next-id 2] [1 :todo/checked? false] [:components.rules.closet/global :components.rules.closet/inserted-passcode []])"
cljs꞉components.rules.core꞉> 
nil
cljs꞉components.rules.core꞉> 
nil
; ------ WARNING - :undeclared-ns ------------------------------------------------
;  Resource: <eval>:1:2
 No such namespace: end, could not locate end.cljs, end.cljc, or JavaScript source providing "end"
--------------------------------------------------------------------------------

; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:2
 Use of undeclared Var end/read-string
--------------------------------------------------------------------------------

cljs꞉components.rules.core꞉> 
([:components.rules.todos/global :components.rules.todos/active-id nil] [:components.rules.closet/global :components.rules.closet/valid-passcode? false] [:components.rules.closet/global :components.rules.closet/correct-passcode "PRIDE"] [:components.rules.events/closet :components.rules.events/close true] [1 :todo/buttons (#:button{:content "w", :selected? false, :id 0} #:button{:content "o", :selected? false, :id 1} #:button{:content "n", :selected? false, :id 2} #:button{:content "d", :selected? false, :id 3} #:button{:content "e", :selected? false, :id 4} #:button{:content "r", :selected? false, :id 5} #:button{:content "f", :selected? false, :id 6} #:button{:content "u", :selected? false, :id 7} #:button{:content "l", :selected? false, :id 8})] [:components.rules.todos/global :components.rules.todos/new-todo ""] [1 :todo/content "wonderful"] [1 :todo/editing? false] [:components.rules.events/todo :components.rules.events/insertion "wonderful"] [:components.rules.events/global :components.rules.events/next-id 2] [1 :todo/checked? false] [:components.rules.closet/global :components.rules.closet/inserted-passcode []])
cljs꞉components.rules.core꞉> 
; nREPL Connection was closed
